AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
#  HelloWorldFunction:
#    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
#    Properties:
#      CodeUri: hello_world/
#      Handler: app.lambda_handler
#      Runtime: python3.7
#      Events:
#        HelloWorld:
#          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
#          Properties:
#            Path: /hello
#            Method: get
  APIHandler:
    Type: AWS::Serverless::Function
    Properties:
      #CodeUri: ./deployment.zip
      CodeUri: hello_world/
      Handler: app.app
      Runtime: python3.7
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - DefaultRole
          - Arn
      Tags:
        aws-chalice: version=1.21.0:stage=dev:app=chalice-sam
      Timeout: 60
      Tracing: PassThrough

  DefaultRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Sid: ''
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:*:logs:*:*:*
            Version: '2012-10-17'
          PolicyName: DefaultRolePolicy

  #Gives API Gateway role to invoke Lambda
  APIHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: APIHandler
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
          - RestAPIId:
              Ref: RestAPI

  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: EDGE
      StageName: api
      DefinitionBody:
        definitions:
          Empty:
            title: Empty Schema
            type: object
        info:
          title: chalice-sam
          version: '1.0'
        paths:
          /:
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /cities/{city}:
            get:
              consumes:
                - application/json
              parameters:
                - in: path
                  name: city
                  required: true
                  type: string
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /hello/{name}:
            get:
              consumes:
                - application/json
              parameters:
                - in: path
                  name: name
                  required: true
                  type: string
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
          /users:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
        schemes:
          - https
        swagger: '2.0'
        x-amazon-apigateway-binary-media-types:
          - application/octet-stream
          - application/x-tar
          - application/zip
          - audio/basic
          - audio/ogg
          - audio/mp4
          - audio/mpeg
          - audio/wav
          - audio/webm
          - image/png
          - image/jpg
          - image/jpeg
          - image/gif
          - video/ogg
          - video/mpeg
          - video/webm
#  BasicAWSApiGateway:
#    Type: AWS::Serverless::Api
#    Properties:
#      Name: Basic AWS Api Gateway
#      StageName: Staging
#
#  HelloWorldFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: hello_world/
#      Handler: app.lambda_handler
#      Runtime: python3.7
#      Events:
#        HelloWorldApi:
#          Type: Api
#          Properties:
#            RestApiId: !Ref BasicAWSApiGateway
#            Path: /hello
#            Method: GET

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#  HelloWorldApi:
#    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#  HelloWorldFunction:
#    Description: "Hello World Lambda Function ARN"
#    Value: !GetAtt HelloWorldFunction.Arn
#  HelloWorldFunctionIamRole:
#    Description: "Implicit IAM Role created for Hello World function"
#    Value: !GetAtt HelloWorldFunctionRole.Arn
  APIHandlerArn:
    Value:
      Fn::GetAtt:
        - APIHandler
        - Arn
  APIHandlerName:
    Value:
      Ref: APIHandler
  EndpointURL:
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}/api/
  RestAPIId:
    Value:
      Ref: RestAPI
